/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/clipboard";
exports.ids = ["vendor-chunks/clipboard"];
exports.modules = {

/***/ "(ssr)/./node_modules/clipboard/dist/clipboard.js":
/*!**************************************************!*\
  !*** ./node_modules/clipboard/dist/clipboard.js ***!
  \**************************************************/
/***/ (function(module) {

eval("/*!\n * clipboard.js v2.0.11\n * https://clipboardjs.com/\n *\n * Licensed MIT Â© Zeno Rocha\n */ (function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory();\n    else {}\n})(this, function() {\n    return /******/ function() {\n        /******/ var __webpack_modules__ = {\n            /***/ 686: /***/ function(__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_629__) {\n                \"use strict\";\n                // EXPORTS\n                __nested_webpack_require_629__.d(__nested_webpack_exports__, {\n                    \"default\": function() {\n                        return /* binding */ clipboard;\n                    }\n                });\n                // EXTERNAL MODULE: ./node_modules/tiny-emitter/index.js\n                var tiny_emitter = __nested_webpack_require_629__(279);\n                var tiny_emitter_default = /*#__PURE__*/ __nested_webpack_require_629__.n(tiny_emitter);\n                // EXTERNAL MODULE: ./node_modules/good-listener/src/listen.js\n                var listen = __nested_webpack_require_629__(370);\n                var listen_default = /*#__PURE__*/ __nested_webpack_require_629__.n(listen);\n                // EXTERNAL MODULE: ./node_modules/select/src/select.js\n                var src_select = __nested_webpack_require_629__(817);\n                var select_default = /*#__PURE__*/ __nested_webpack_require_629__.n(src_select);\n                ; // CONCATENATED MODULE: ./src/common/command.js\n                /**\n * Executes a given operation type.\n * @param {String} type\n * @return {Boolean}\n */ function command(type) {\n                    try {\n                        return document.execCommand(type);\n                    } catch (err) {\n                        return false;\n                    }\n                }\n                ; // CONCATENATED MODULE: ./src/actions/cut.js\n                /**\n * Cut action wrapper.\n * @param {String|HTMLElement} target\n * @return {String}\n */ var ClipboardActionCut = function ClipboardActionCut(target) {\n                    var selectedText = select_default()(target);\n                    command(\"cut\");\n                    return selectedText;\n                };\n                /* harmony default export */ var actions_cut = ClipboardActionCut;\n                ; // CONCATENATED MODULE: ./src/common/create-fake-element.js\n                /**\n * Creates a fake textarea element with a value.\n * @param {String} value\n * @return {HTMLElement}\n */ function createFakeElement(value) {\n                    var isRTL = document.documentElement.getAttribute(\"dir\") === \"rtl\";\n                    var fakeElement = document.createElement(\"textarea\"); // Prevent zooming on iOS\n                    fakeElement.style.fontSize = \"12pt\"; // Reset box model\n                    fakeElement.style.border = \"0\";\n                    fakeElement.style.padding = \"0\";\n                    fakeElement.style.margin = \"0\"; // Move element out of screen horizontally\n                    fakeElement.style.position = \"absolute\";\n                    fakeElement.style[isRTL ? \"right\" : \"left\"] = \"-9999px\"; // Move element to the same position vertically\n                    var yPosition = window.pageYOffset || document.documentElement.scrollTop;\n                    fakeElement.style.top = \"\".concat(yPosition, \"px\");\n                    fakeElement.setAttribute(\"readonly\", \"\");\n                    fakeElement.value = value;\n                    return fakeElement;\n                }\n                ; // CONCATENATED MODULE: ./src/actions/copy.js\n                /**\n * Create fake copy action wrapper using a fake element.\n * @param {String} target\n * @param {Object} options\n * @return {String}\n */ var fakeCopyAction = function fakeCopyAction(value, options) {\n                    var fakeElement = createFakeElement(value);\n                    options.container.appendChild(fakeElement);\n                    var selectedText = select_default()(fakeElement);\n                    command(\"copy\");\n                    fakeElement.remove();\n                    return selectedText;\n                };\n                /**\n * Copy action wrapper.\n * @param {String|HTMLElement} target\n * @param {Object} options\n * @return {String}\n */ var ClipboardActionCopy = function ClipboardActionCopy(target) {\n                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n                        container: document.body\n                    };\n                    var selectedText = \"\";\n                    if (typeof target === \"string\") {\n                        selectedText = fakeCopyAction(target, options);\n                    } else if (target instanceof HTMLInputElement && ![\n                        \"text\",\n                        \"search\",\n                        \"url\",\n                        \"tel\",\n                        \"password\"\n                    ].includes(target === null || target === void 0 ? void 0 : target.type)) {\n                        // If input type doesn't support `setSelectionRange`. Simulate it. https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement/setSelectionRange\n                        selectedText = fakeCopyAction(target.value, options);\n                    } else {\n                        selectedText = select_default()(target);\n                        command(\"copy\");\n                    }\n                    return selectedText;\n                };\n                /* harmony default export */ var actions_copy = ClipboardActionCopy;\n                ; // CONCATENATED MODULE: ./src/actions/default.js\n                function _typeof(obj) {\n                    \"@babel/helpers - typeof\";\n                    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                        _typeof = function _typeof(obj) {\n                            return typeof obj;\n                        };\n                    } else {\n                        _typeof = function _typeof(obj) {\n                            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                        };\n                    }\n                    return _typeof(obj);\n                }\n                /**\n * Inner function which performs selection from either `text` or `target`\n * properties and then executes copy or cut operations.\n * @param {Object} options\n */ var ClipboardActionDefault = function ClipboardActionDefault() {\n                    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                    // Defines base properties passed from constructor.\n                    var _options$action = options.action, action = _options$action === void 0 ? \"copy\" : _options$action, container = options.container, target = options.target, text = options.text; // Sets the `action` to be performed which can be either 'copy' or 'cut'.\n                    if (action !== \"copy\" && action !== \"cut\") {\n                        throw new Error('Invalid \"action\" value, use either \"copy\" or \"cut\"');\n                    } // Sets the `target` property using an element that will be have its content copied.\n                    if (target !== undefined) {\n                        if (target && _typeof(target) === \"object\" && target.nodeType === 1) {\n                            if (action === \"copy\" && target.hasAttribute(\"disabled\")) {\n                                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\n                            }\n                            if (action === \"cut\" && (target.hasAttribute(\"readonly\") || target.hasAttribute(\"disabled\"))) {\n                                throw new Error('Invalid \"target\" attribute. You can\\'t cut text from elements with \"readonly\" or \"disabled\" attributes');\n                            }\n                        } else {\n                            throw new Error('Invalid \"target\" value, use a valid Element');\n                        }\n                    } // Define selection strategy based on `text` property.\n                    if (text) {\n                        return actions_copy(text, {\n                            container: container\n                        });\n                    } // Defines which selection strategy based on `target` property.\n                    if (target) {\n                        return action === \"cut\" ? actions_cut(target) : actions_copy(target, {\n                            container: container\n                        });\n                    }\n                };\n                /* harmony default export */ var actions_default = ClipboardActionDefault;\n                ; // CONCATENATED MODULE: ./src/clipboard.js\n                function clipboard_typeof(obj) {\n                    \"@babel/helpers - typeof\";\n                    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                        clipboard_typeof = function _typeof(obj) {\n                            return typeof obj;\n                        };\n                    } else {\n                        clipboard_typeof = function _typeof(obj) {\n                            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                        };\n                    }\n                    return clipboard_typeof(obj);\n                }\n                function _classCallCheck(instance, Constructor) {\n                    if (!(instance instanceof Constructor)) {\n                        throw new TypeError(\"Cannot call a class as a function\");\n                    }\n                }\n                function _defineProperties(target, props) {\n                    for(var i = 0; i < props.length; i++){\n                        var descriptor = props[i];\n                        descriptor.enumerable = descriptor.enumerable || false;\n                        descriptor.configurable = true;\n                        if (\"value\" in descriptor) descriptor.writable = true;\n                        Object.defineProperty(target, descriptor.key, descriptor);\n                    }\n                }\n                function _createClass(Constructor, protoProps, staticProps) {\n                    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n                    if (staticProps) _defineProperties(Constructor, staticProps);\n                    return Constructor;\n                }\n                function _inherits(subClass, superClass) {\n                    if (typeof superClass !== \"function\" && superClass !== null) {\n                        throw new TypeError(\"Super expression must either be null or a function\");\n                    }\n                    subClass.prototype = Object.create(superClass && superClass.prototype, {\n                        constructor: {\n                            value: subClass,\n                            writable: true,\n                            configurable: true\n                        }\n                    });\n                    if (superClass) _setPrototypeOf(subClass, superClass);\n                }\n                function _setPrototypeOf(o, p) {\n                    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n                        o.__proto__ = p;\n                        return o;\n                    };\n                    return _setPrototypeOf(o, p);\n                }\n                function _createSuper(Derived) {\n                    var hasNativeReflectConstruct = _isNativeReflectConstruct();\n                    return function _createSuperInternal() {\n                        var Super = _getPrototypeOf(Derived), result;\n                        if (hasNativeReflectConstruct) {\n                            var NewTarget = _getPrototypeOf(this).constructor;\n                            result = Reflect.construct(Super, arguments, NewTarget);\n                        } else {\n                            result = Super.apply(this, arguments);\n                        }\n                        return _possibleConstructorReturn(this, result);\n                    };\n                }\n                function _possibleConstructorReturn(self, call) {\n                    if (call && (clipboard_typeof(call) === \"object\" || typeof call === \"function\")) {\n                        return call;\n                    }\n                    return _assertThisInitialized(self);\n                }\n                function _assertThisInitialized(self) {\n                    if (self === void 0) {\n                        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n                    }\n                    return self;\n                }\n                function _isNativeReflectConstruct() {\n                    if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n                    if (Reflect.construct.sham) return false;\n                    if (typeof Proxy === \"function\") return true;\n                    try {\n                        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));\n                        return true;\n                    } catch (e) {\n                        return false;\n                    }\n                }\n                function _getPrototypeOf(o) {\n                    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n                        return o.__proto__ || Object.getPrototypeOf(o);\n                    };\n                    return _getPrototypeOf(o);\n                }\n                /**\n * Helper function to retrieve attribute value.\n * @param {String} suffix\n * @param {Element} element\n */ function getAttributeValue(suffix, element) {\n                    var attribute = \"data-clipboard-\".concat(suffix);\n                    if (!element.hasAttribute(attribute)) {\n                        return;\n                    }\n                    return element.getAttribute(attribute);\n                }\n                /**\n * Base class which takes one or more elements, adds event listeners to them,\n * and instantiates a new `ClipboardAction` on each click.\n */ var Clipboard = /*#__PURE__*/ function(_Emitter) {\n                    _inherits(Clipboard, _Emitter);\n                    var _super = _createSuper(Clipboard);\n                    /**\n   * @param {String|HTMLElement|HTMLCollection|NodeList} trigger\n   * @param {Object} options\n   */ function Clipboard(trigger, options) {\n                        var _this;\n                        _classCallCheck(this, Clipboard);\n                        _this = _super.call(this);\n                        _this.resolveOptions(options);\n                        _this.listenClick(trigger);\n                        return _this;\n                    }\n                    /**\n   * Defines if attributes would be resolved using internal setter functions\n   * or custom functions that were passed in the constructor.\n   * @param {Object} options\n   */ _createClass(Clipboard, [\n                        {\n                            key: \"resolveOptions\",\n                            value: function resolveOptions() {\n                                var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n                                this.action = typeof options.action === \"function\" ? options.action : this.defaultAction;\n                                this.target = typeof options.target === \"function\" ? options.target : this.defaultTarget;\n                                this.text = typeof options.text === \"function\" ? options.text : this.defaultText;\n                                this.container = clipboard_typeof(options.container) === \"object\" ? options.container : document.body;\n                            }\n                        },\n                        {\n                            key: \"listenClick\",\n                            value: function listenClick(trigger) {\n                                var _this2 = this;\n                                this.listener = listen_default()(trigger, \"click\", function(e) {\n                                    return _this2.onClick(e);\n                                });\n                            }\n                        },\n                        {\n                            key: \"onClick\",\n                            value: function onClick(e) {\n                                var trigger = e.delegateTarget || e.currentTarget;\n                                var action = this.action(trigger) || \"copy\";\n                                var text = actions_default({\n                                    action: action,\n                                    container: this.container,\n                                    target: this.target(trigger),\n                                    text: this.text(trigger)\n                                }); // Fires an event based on the copy operation result.\n                                this.emit(text ? \"success\" : \"error\", {\n                                    action: action,\n                                    text: text,\n                                    trigger: trigger,\n                                    clearSelection: function clearSelection() {\n                                        if (trigger) {\n                                            trigger.focus();\n                                        }\n                                        window.getSelection().removeAllRanges();\n                                    }\n                                });\n                            }\n                        },\n                        {\n                            key: \"defaultAction\",\n                            value: function defaultAction(trigger) {\n                                return getAttributeValue(\"action\", trigger);\n                            }\n                        },\n                        {\n                            key: \"defaultTarget\",\n                            value: function defaultTarget(trigger) {\n                                var selector = getAttributeValue(\"target\", trigger);\n                                if (selector) {\n                                    return document.querySelector(selector);\n                                }\n                            }\n                        },\n                        {\n                            key: \"defaultText\",\n                            /**\n     * Default `text` lookup function.\n     * @param {Element} trigger\n     */ value: function defaultText(trigger) {\n                                return getAttributeValue(\"text\", trigger);\n                            }\n                        },\n                        {\n                            key: \"destroy\",\n                            value: function destroy() {\n                                this.listener.destroy();\n                            }\n                        }\n                    ], [\n                        {\n                            key: \"copy\",\n                            value: function copy(target) {\n                                var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n                                    container: document.body\n                                };\n                                return actions_copy(target, options);\n                            }\n                        },\n                        {\n                            key: \"cut\",\n                            value: function cut(target) {\n                                return actions_cut(target);\n                            }\n                        },\n                        {\n                            key: \"isSupported\",\n                            value: function isSupported() {\n                                var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [\n                                    \"copy\",\n                                    \"cut\"\n                                ];\n                                var actions = typeof action === \"string\" ? [\n                                    action\n                                ] : action;\n                                var support = !!document.queryCommandSupported;\n                                actions.forEach(function(action) {\n                                    support = support && !!document.queryCommandSupported(action);\n                                });\n                                return support;\n                            }\n                        }\n                    ]);\n                    return Clipboard;\n                }(tiny_emitter_default());\n                /* harmony default export */ var clipboard = Clipboard;\n            /***/ },\n            /***/ 828: /***/ function(module1) {\n                var DOCUMENT_NODE_TYPE = 9;\n                /**\n * A polyfill for Element.matches()\n */ if (typeof Element !== \"undefined\" && !Element.prototype.matches) {\n                    var proto = Element.prototype;\n                    proto.matches = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector || proto.oMatchesSelector || proto.webkitMatchesSelector;\n                }\n                /**\n * Finds the closest parent that matches a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @return {Function}\n */ function closest(element, selector) {\n                    while(element && element.nodeType !== DOCUMENT_NODE_TYPE){\n                        if (typeof element.matches === \"function\" && element.matches(selector)) {\n                            return element;\n                        }\n                        element = element.parentNode;\n                    }\n                }\n                module1.exports = closest;\n            /***/ },\n            /***/ 438: /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_22275__) {\n                var closest = __nested_webpack_require_22275__(828);\n                /**\n * Delegates event to a selector.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */ function _delegate(element, selector, type, callback, useCapture) {\n                    var listenerFn = listener.apply(this, arguments);\n                    element.addEventListener(type, listenerFn, useCapture);\n                    return {\n                        destroy: function() {\n                            element.removeEventListener(type, listenerFn, useCapture);\n                        }\n                    };\n                }\n                /**\n * Delegates event to a selector.\n *\n * @param {Element|String|Array} [elements]\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @param {Boolean} useCapture\n * @return {Object}\n */ function delegate(elements, selector, type, callback, useCapture) {\n                    // Handle the regular Element usage\n                    if (typeof elements.addEventListener === \"function\") {\n                        return _delegate.apply(null, arguments);\n                    }\n                    // Handle Element-less usage, it defaults to global delegation\n                    if (typeof type === \"function\") {\n                        // Use `document` as the first parameter, then apply arguments\n                        // This is a short way to .unshift `arguments` without running into deoptimizations\n                        return _delegate.bind(null, document).apply(null, arguments);\n                    }\n                    // Handle Selector-based usage\n                    if (typeof elements === \"string\") {\n                        elements = document.querySelectorAll(elements);\n                    }\n                    // Handle Array-like based usage\n                    return Array.prototype.map.call(elements, function(element) {\n                        return _delegate(element, selector, type, callback, useCapture);\n                    });\n                }\n                /**\n * Finds closest match and invokes callback.\n *\n * @param {Element} element\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Function}\n */ function listener(element, selector, type, callback) {\n                    return function(e) {\n                        e.delegateTarget = closest(e.target, selector);\n                        if (e.delegateTarget) {\n                            callback.call(element, e);\n                        }\n                    };\n                }\n                module1.exports = delegate;\n            /***/ },\n            /***/ 879: /***/ function(__unused_webpack_module, exports1) {\n                /**\n * Check if argument is a HTML element.\n *\n * @param {Object} value\n * @return {Boolean}\n */ exports1.node = function(value) {\n                    return value !== undefined && value instanceof HTMLElement && value.nodeType === 1;\n                };\n                /**\n * Check if argument is a list of HTML elements.\n *\n * @param {Object} value\n * @return {Boolean}\n */ exports1.nodeList = function(value) {\n                    var type = Object.prototype.toString.call(value);\n                    return value !== undefined && (type === \"[object NodeList]\" || type === \"[object HTMLCollection]\") && \"length\" in value && (value.length === 0 || exports1.node(value[0]));\n                };\n                /**\n * Check if argument is a string.\n *\n * @param {Object} value\n * @return {Boolean}\n */ exports1.string = function(value) {\n                    return typeof value === \"string\" || value instanceof String;\n                };\n                /**\n * Check if argument is a function.\n *\n * @param {Object} value\n * @return {Boolean}\n */ exports1.fn = function(value) {\n                    var type = Object.prototype.toString.call(value);\n                    return type === \"[object Function]\";\n                };\n            /***/ },\n            /***/ 370: /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_26467__) {\n                var is = __nested_webpack_require_26467__(879);\n                var delegate = __nested_webpack_require_26467__(438);\n                /**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */ function listen(target, type, callback) {\n                    if (!target && !type && !callback) {\n                        throw new Error(\"Missing required arguments\");\n                    }\n                    if (!is.string(type)) {\n                        throw new TypeError(\"Second argument must be a String\");\n                    }\n                    if (!is.fn(callback)) {\n                        throw new TypeError(\"Third argument must be a Function\");\n                    }\n                    if (is.node(target)) {\n                        return listenNode(target, type, callback);\n                    } else if (is.nodeList(target)) {\n                        return listenNodeList(target, type, callback);\n                    } else if (is.string(target)) {\n                        return listenSelector(target, type, callback);\n                    } else {\n                        throw new TypeError(\"First argument must be a String, HTMLElement, HTMLCollection, or NodeList\");\n                    }\n                }\n                /**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */ function listenNode(node, type, callback) {\n                    node.addEventListener(type, callback);\n                    return {\n                        destroy: function() {\n                            node.removeEventListener(type, callback);\n                        }\n                    };\n                }\n                /**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */ function listenNodeList(nodeList, type, callback) {\n                    Array.prototype.forEach.call(nodeList, function(node) {\n                        node.addEventListener(type, callback);\n                    });\n                    return {\n                        destroy: function() {\n                            Array.prototype.forEach.call(nodeList, function(node) {\n                                node.removeEventListener(type, callback);\n                            });\n                        }\n                    };\n                }\n                /**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */ function listenSelector(selector, type, callback) {\n                    return delegate(document.body, selector, type, callback);\n                }\n                module1.exports = listen;\n            /***/ },\n            /***/ 817: /***/ function(module1) {\n                function select(element) {\n                    var selectedText;\n                    if (element.nodeName === \"SELECT\") {\n                        element.focus();\n                        selectedText = element.value;\n                    } else if (element.nodeName === \"INPUT\" || element.nodeName === \"TEXTAREA\") {\n                        var isReadOnly = element.hasAttribute(\"readonly\");\n                        if (!isReadOnly) {\n                            element.setAttribute(\"readonly\", \"\");\n                        }\n                        element.select();\n                        element.setSelectionRange(0, element.value.length);\n                        if (!isReadOnly) {\n                            element.removeAttribute(\"readonly\");\n                        }\n                        selectedText = element.value;\n                    } else {\n                        if (element.hasAttribute(\"contenteditable\")) {\n                            element.focus();\n                        }\n                        var selection = window.getSelection();\n                        var range = document.createRange();\n                        range.selectNodeContents(element);\n                        selection.removeAllRanges();\n                        selection.addRange(range);\n                        selectedText = selection.toString();\n                    }\n                    return selectedText;\n                }\n                module1.exports = select;\n            /***/ },\n            /***/ 279: /***/ function(module1) {\n                function E() {\n                // Keep this empty so it's easier to inherit from\n                // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n                }\n                E.prototype = {\n                    on: function(name, callback, ctx) {\n                        var e = this.e || (this.e = {});\n                        (e[name] || (e[name] = [])).push({\n                            fn: callback,\n                            ctx: ctx\n                        });\n                        return this;\n                    },\n                    once: function(name, callback, ctx) {\n                        var self = this;\n                        function listener() {\n                            self.off(name, listener);\n                            callback.apply(ctx, arguments);\n                        }\n                        ;\n                        listener._ = callback;\n                        return this.on(name, listener, ctx);\n                    },\n                    emit: function(name) {\n                        var data = [].slice.call(arguments, 1);\n                        var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n                        var i = 0;\n                        var len = evtArr.length;\n                        for(i; i < len; i++){\n                            evtArr[i].fn.apply(evtArr[i].ctx, data);\n                        }\n                        return this;\n                    },\n                    off: function(name, callback) {\n                        var e = this.e || (this.e = {});\n                        var evts = e[name];\n                        var liveEvents = [];\n                        if (evts && callback) {\n                            for(var i = 0, len = evts.length; i < len; i++){\n                                if (evts[i].fn !== callback && evts[i].fn._ !== callback) liveEvents.push(evts[i]);\n                            }\n                        }\n                        // Remove event from queue to prevent memory leak\n                        // Suggested by https://github.com/lazd\n                        // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n                        liveEvents.length ? e[name] = liveEvents : delete e[name];\n                        return this;\n                    }\n                };\n                module1.exports = E;\n                module1.exports.TinyEmitter = E;\n            /***/ }\n        };\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_34042__(moduleId) {\n            /******/ // Check if module is in cache\n            /******/ if (__webpack_module_cache__[moduleId]) {\n                /******/ return __webpack_module_cache__[moduleId].exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = __webpack_module_cache__[moduleId] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId](module1, module1.exports, __nested_webpack_require_34042__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/ !function() {\n            /******/ // getDefaultExport function for compatibility with non-harmony modules\n            /******/ __nested_webpack_require_34042__.n = function(module1) {\n                /******/ var getter = module1 && module1.__esModule ? /******/ function() {\n                    return module1[\"default\"];\n                } : /******/ function() {\n                    return module1;\n                };\n                /******/ __nested_webpack_require_34042__.d(getter, {\n                    a: getter\n                });\n                /******/ return getter;\n            /******/ };\n        /******/ }();\n        /******/ /******/ /* webpack/runtime/define property getters */ /******/ !function() {\n            /******/ // define getter functions for harmony exports\n            /******/ __nested_webpack_require_34042__.d = function(exports1, definition) {\n                /******/ for(var key in definition){\n                    /******/ if (__nested_webpack_require_34042__.o(definition, key) && !__nested_webpack_require_34042__.o(exports1, key)) {\n                        /******/ Object.defineProperty(exports1, key, {\n                            enumerable: true,\n                            get: definition[key]\n                        });\n                    /******/ }\n                /******/ }\n            /******/ };\n        /******/ }();\n        /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ !function() {\n            /******/ __nested_webpack_require_34042__.o = function(obj, prop) {\n                return Object.prototype.hasOwnProperty.call(obj, prop);\n            };\n        /******/ }();\n        /******/ /************************************************************************/ /******/ // module exports must be returned from runtime so entry inlining is disabled\n        /******/ // startup\n        /******/ // Load entry module and return exports\n        /******/ return __nested_webpack_require_34042__(686);\n    /******/ }().default;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/clipboard/dist/clipboard.js\n");

/***/ })

};
;