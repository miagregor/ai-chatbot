"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-contenteditable";
exports.ids = ["vendor-chunks/react-contenteditable"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-contenteditable/lib/react-contenteditable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-contenteditable/lib/react-contenteditable.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = this && this.__extends || function() {\n    var extendStatics = function(d, b) {\n        extendStatics = Object.setPrototypeOf || ({\n            __proto__: []\n        }) instanceof Array && function(d, b) {\n            d.__proto__ = b;\n        } || function(d, b) {\n            for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        };\n        return extendStatics(d, b);\n    };\n    return function(d, b) {\n        if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() {\n            this.constructor = d;\n        }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n}();\nvar __assign = this && this.__assign || function() {\n    __assign = Object.assign || function(t) {\n        for(var s, i = 1, n = arguments.length; i < n; i++){\n            s = arguments[i];\n            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function(o, v) {\n    Object.defineProperty(o, \"default\", {\n        enumerable: true,\n        value: v\n    });\n} : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function(mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) {\n        for(var k in mod)if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    }\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __rest = this && this.__rest || function(s, e) {\n    var t = {};\n    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++){\n        if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n    }\n    return t;\n};\nvar __importDefault = this && this.__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nvar React = __importStar(__webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\"));\nvar fast_deep_equal_1 = __importDefault(__webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\"));\nvar PropTypes = __importStar(__webpack_require__(/*! prop-types */ \"(ssr)/./node_modules/prop-types/index.js\"));\nfunction normalizeHtml(str) {\n    return str && str.replace(/&nbsp;|\\u202F|\\u00A0/g, \" \").replace(/<br \\/>/g, \"<br>\");\n}\nfunction replaceCaret(el) {\n    // Place the caret at the end of the element\n    var target = document.createTextNode(\"\");\n    el.appendChild(target);\n    // do not move caret if element was not focused\n    var isTargetFocused = document.activeElement === el;\n    if (target !== null && target.nodeValue !== null && isTargetFocused) {\n        var sel = window.getSelection();\n        if (sel !== null) {\n            var range = document.createRange();\n            range.setStart(target, target.nodeValue.length);\n            range.collapse(true);\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n        if (el instanceof HTMLElement) el.focus();\n    }\n}\n/**\n * A simple component for an html element with editable contents.\n */ var ContentEditable = /** @class */ function(_super) {\n    __extends(ContentEditable, _super);\n    function ContentEditable() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.lastHtml = _this.props.html;\n        _this.el = typeof _this.props.innerRef === \"function\" ? {\n            current: null\n        } : React.createRef();\n        _this.getEl = function() {\n            return (_this.props.innerRef && typeof _this.props.innerRef !== \"function\" ? _this.props.innerRef : _this.el).current;\n        };\n        _this.emitChange = function(originalEvt) {\n            var el = _this.getEl();\n            if (!el) return;\n            var html = el.innerHTML;\n            if (_this.props.onChange && html !== _this.lastHtml) {\n                // Clone event with Object.assign to avoid\n                // \"Cannot assign to read only property 'target' of object\"\n                var evt = Object.assign({}, originalEvt, {\n                    target: {\n                        value: html\n                    }\n                });\n                _this.props.onChange(evt);\n            }\n            _this.lastHtml = html;\n        };\n        return _this;\n    }\n    ContentEditable.prototype.render = function() {\n        var _this = this;\n        var _a = this.props, tagName = _a.tagName, html = _a.html, innerRef = _a.innerRef, props = __rest(_a, [\n            \"tagName\",\n            \"html\",\n            \"innerRef\"\n        ]);\n        return React.createElement(tagName || \"div\", __assign(__assign({}, props), {\n            ref: typeof innerRef === \"function\" ? function(current) {\n                innerRef(current);\n                _this.el.current = current;\n            } : innerRef || this.el,\n            onInput: this.emitChange,\n            onBlur: this.props.onBlur || this.emitChange,\n            onKeyUp: this.props.onKeyUp || this.emitChange,\n            onKeyDown: this.props.onKeyDown || this.emitChange,\n            contentEditable: !this.props.disabled,\n            dangerouslySetInnerHTML: {\n                __html: html\n            }\n        }), this.props.children);\n    };\n    ContentEditable.prototype.shouldComponentUpdate = function(nextProps) {\n        var props = this.props;\n        var el = this.getEl();\n        // We need not rerender if the change of props simply reflects the user's edits.\n        // Rerendering in this case would make the cursor/caret jump\n        // Rerender if there is no element yet... (somehow?)\n        if (!el) return true;\n        // ...or if html really changed... (programmatically, not by user edit)\n        if (normalizeHtml(nextProps.html) !== normalizeHtml(el.innerHTML)) {\n            return true;\n        }\n        // Handle additional properties\n        return props.disabled !== nextProps.disabled || props.tagName !== nextProps.tagName || props.className !== nextProps.className || props.innerRef !== nextProps.innerRef || props.placeholder !== nextProps.placeholder || !(0, fast_deep_equal_1.default)(props.style, nextProps.style);\n    };\n    ContentEditable.prototype.componentDidUpdate = function() {\n        var el = this.getEl();\n        if (!el) return;\n        // Perhaps React (whose VDOM gets outdated because we often prevent\n        // rerendering) did not update the DOM. So we update it manually now.\n        if (this.props.html !== el.innerHTML) {\n            el.innerHTML = this.props.html;\n        }\n        this.lastHtml = this.props.html;\n        replaceCaret(el);\n    };\n    ContentEditable.propTypes = {\n        html: PropTypes.string.isRequired,\n        onChange: PropTypes.func,\n        disabled: PropTypes.bool,\n        tagName: PropTypes.string,\n        className: PropTypes.string,\n        style: PropTypes.object,\n        innerRef: PropTypes.oneOfType([\n            PropTypes.object,\n            PropTypes.func\n        ])\n    };\n    return ContentEditable;\n}(React.Component);\nexports[\"default\"] = ContentEditable;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-contenteditable/lib/react-contenteditable.js\n");

/***/ })

};
;