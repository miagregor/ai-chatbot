"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/rehype-katex";
exports.ids = ["vendor-chunks/rehype-katex"];
exports.modules = {

/***/ "(ssr)/./node_modules/rehype-katex/lib/index.js":
/*!************************************************!*\
  !*** ./node_modules/rehype-katex/lib/index.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ rehypeKatex)\n/* harmony export */ });\n/* harmony import */ var hast_util_from_html_isomorphic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! hast-util-from-html-isomorphic */ \"(ssr)/./node_modules/hast-util-from-html-isomorphic/lib/index.js\");\n/* harmony import */ var hast_util_to_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! hast-util-to-text */ \"(ssr)/./node_modules/hast-util-to-text/lib/index.js\");\n/* harmony import */ var katex__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! katex */ \"(ssr)/./node_modules/katex/dist/katex.mjs\");\n/* harmony import */ var unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! unist-util-visit-parents */ \"(ssr)/./node_modules/unist-util-visit-parents/lib/index.js\");\n/**\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Root} Root\n *\n * @typedef {import('katex').KatexOptions} KatexOptions\n *\n * @typedef {import('vfile').VFile} VFile\n */ /**\n * @typedef {Omit<KatexOptions, 'displayMode' | 'throwOnError'>} Options\n */ \n\n\n\n/** @type {Readonly<Options>} */ const emptyOptions = {};\n/** @type {ReadonlyArray<unknown>} */ const emptyClasses = [];\n/**\n * Render elements with a `language-math` (or `math-display`, `math-inline`)\n * class with KaTeX.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */ function rehypeKatex(options) {\n    const settings = options || emptyOptions;\n    /**\n   * Transform.\n   *\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {undefined}\n   *   Nothing.\n   */ return function(tree, file) {\n        (0,unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_1__.visitParents)(tree, \"element\", function(element, parents) {\n            const classes = Array.isArray(element.properties.className) ? element.properties.className : emptyClasses;\n            // This class can be generated from markdown with ` ```math `.\n            const languageMath = classes.includes(\"language-math\");\n            // This class is used by `remark-math` for flow math (block, `$$\\nmath\\n$$`).\n            const mathDisplay = classes.includes(\"math-display\");\n            // This class is used by `remark-math` for text math (inline, `$math$`).\n            const mathInline = classes.includes(\"math-inline\");\n            let displayMode = mathDisplay;\n            // Any class is fine.\n            if (!languageMath && !mathDisplay && !mathInline) {\n                return;\n            }\n            let parent = parents[parents.length - 1];\n            let scope = element;\n            // If this was generated with ` ```math `, replace the `<pre>` and use\n            // display.\n            if (element.tagName === \"code\" && languageMath && parent && parent.type === \"element\" && parent.tagName === \"pre\") {\n                scope = parent;\n                parent = parents[parents.length - 2];\n                displayMode = true;\n            }\n            /* c8 ignore next -- verbose to test. */ if (!parent) return;\n            const value = (0,hast_util_to_text__WEBPACK_IMPORTED_MODULE_2__.toText)(scope, {\n                whitespace: \"pre\"\n            });\n            /** @type {Array<ElementContent> | string | undefined} */ let result;\n            try {\n                result = katex__WEBPACK_IMPORTED_MODULE_0__[\"default\"].renderToString(value, {\n                    ...settings,\n                    displayMode,\n                    throwOnError: true\n                });\n            } catch (error) {\n                const cause = /** @type {Error} */ error;\n                const ruleId = cause.name.toLowerCase();\n                file.message(\"Could not render math with KaTeX\", {\n                    ancestors: [\n                        ...parents,\n                        element\n                    ],\n                    cause,\n                    place: element.position,\n                    ruleId,\n                    source: \"rehype-katex\"\n                });\n                // KaTeX can handle `ParseError` itself, but not others.\n                if (ruleId === \"parseerror\") {\n                    result = katex__WEBPACK_IMPORTED_MODULE_0__[\"default\"].renderToString(value, {\n                        ...settings,\n                        displayMode,\n                        strict: \"ignore\",\n                        throwOnError: false\n                    });\n                } else {\n                    result = [\n                        {\n                            type: \"element\",\n                            tagName: \"span\",\n                            properties: {\n                                className: [\n                                    \"katex-error\"\n                                ],\n                                style: \"color:\" + (settings.errorColor || \"#cc0000\"),\n                                title: String(error)\n                            },\n                            children: [\n                                {\n                                    type: \"text\",\n                                    value\n                                }\n                            ]\n                        }\n                    ];\n                }\n            }\n            if (typeof result === \"string\") {\n                const root = (0,hast_util_from_html_isomorphic__WEBPACK_IMPORTED_MODULE_3__.fromHtmlIsomorphic)(result, {\n                    fragment: true\n                });\n                // Cast as we donâ€™t expect `doctypes` in KaTeX result.\n                result = /** @type {Array<ElementContent>} */ root.children;\n            }\n            const index = parent.children.indexOf(scope);\n            parent.children.splice(index, 1, ...result);\n            return unist_util_visit_parents__WEBPACK_IMPORTED_MODULE_1__.SKIP;\n        });\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVoeXBlLWthdGV4L2xpYi9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFRDs7Q0FFQyxHQUVnRTtBQUN6QjtBQUNmO0FBQ2tDO0FBRTNELDhCQUE4QixHQUM5QixNQUFNSyxlQUFlLENBQUM7QUFDdEIsbUNBQW1DLEdBQ25DLE1BQU1DLGVBQWUsRUFBRTtBQUV2Qjs7Ozs7Ozs7Q0FRQyxHQUNjLFNBQVNDLFlBQVlDLE9BQU87SUFDekMsTUFBTUMsV0FBV0QsV0FBV0g7SUFFNUI7Ozs7Ozs7OztHQVNDLEdBQ0QsT0FBTyxTQUFVSyxJQUFJLEVBQUVDLElBQUk7UUFDekJQLHNFQUFZQSxDQUFDTSxNQUFNLFdBQVcsU0FBVUUsT0FBTyxFQUFFQyxPQUFPO1lBQ3RELE1BQU1DLFVBQVVDLE1BQU1DLE9BQU8sQ0FBQ0osUUFBUUssVUFBVSxDQUFDQyxTQUFTLElBQ3RETixRQUFRSyxVQUFVLENBQUNDLFNBQVMsR0FDNUJaO1lBQ0osOERBQThEO1lBQzlELE1BQU1hLGVBQWVMLFFBQVFNLFFBQVEsQ0FBQztZQUN0Qyw2RUFBNkU7WUFDN0UsTUFBTUMsY0FBY1AsUUFBUU0sUUFBUSxDQUFDO1lBQ3JDLHdFQUF3RTtZQUN4RSxNQUFNRSxhQUFhUixRQUFRTSxRQUFRLENBQUM7WUFDcEMsSUFBSUcsY0FBY0Y7WUFFbEIscUJBQXFCO1lBQ3JCLElBQUksQ0FBQ0YsZ0JBQWdCLENBQUNFLGVBQWUsQ0FBQ0MsWUFBWTtnQkFDaEQ7WUFDRjtZQUVBLElBQUlFLFNBQVNYLE9BQU8sQ0FBQ0EsUUFBUVksTUFBTSxHQUFHLEVBQUU7WUFDeEMsSUFBSUMsUUFBUWQ7WUFFWixzRUFBc0U7WUFDdEUsV0FBVztZQUNYLElBQ0VBLFFBQVFlLE9BQU8sS0FBSyxVQUNwQlIsZ0JBQ0FLLFVBQ0FBLE9BQU9JLElBQUksS0FBSyxhQUNoQkosT0FBT0csT0FBTyxLQUFLLE9BQ25CO2dCQUNBRCxRQUFRRjtnQkFDUkEsU0FBU1gsT0FBTyxDQUFDQSxRQUFRWSxNQUFNLEdBQUcsRUFBRTtnQkFDcENGLGNBQWM7WUFDaEI7WUFFQSxzQ0FBc0MsR0FDdEMsSUFBSSxDQUFDQyxRQUFRO1lBRWIsTUFBTUssUUFBUTVCLHlEQUFNQSxDQUFDeUIsT0FBTztnQkFBQ0ksWUFBWTtZQUFLO1lBRTlDLHVEQUF1RCxHQUN2RCxJQUFJQztZQUVKLElBQUk7Z0JBQ0ZBLFNBQVM3Qiw2Q0FBS0EsQ0FBQzhCLGNBQWMsQ0FBQ0gsT0FBTztvQkFDbkMsR0FBR3BCLFFBQVE7b0JBQ1hjO29CQUNBVSxjQUFjO2dCQUNoQjtZQUNGLEVBQUUsT0FBT0MsT0FBTztnQkFDZCxNQUFNQyxRQUFRLGtCQUFrQixHQUFJRDtnQkFDcEMsTUFBTUUsU0FBU0QsTUFBTUUsSUFBSSxDQUFDQyxXQUFXO2dCQUVyQzNCLEtBQUs0QixPQUFPLENBQUMsb0NBQW9DO29CQUMvQ0MsV0FBVzsyQkFBSTNCO3dCQUFTRDtxQkFBUTtvQkFDaEN1QjtvQkFDQU0sT0FBTzdCLFFBQVE4QixRQUFRO29CQUN2Qk47b0JBQ0FPLFFBQVE7Z0JBQ1Y7Z0JBRUEsd0RBQXdEO2dCQUN4RCxJQUFJUCxXQUFXLGNBQWM7b0JBQzNCTCxTQUFTN0IsNkNBQUtBLENBQUM4QixjQUFjLENBQUNILE9BQU87d0JBQ25DLEdBQUdwQixRQUFRO3dCQUNYYzt3QkFDQXFCLFFBQVE7d0JBQ1JYLGNBQWM7b0JBQ2hCO2dCQUNGLE9BR0s7b0JBQ0hGLFNBQVM7d0JBQ1A7NEJBQ0VILE1BQU07NEJBQ05ELFNBQVM7NEJBQ1RWLFlBQVk7Z0NBQ1ZDLFdBQVc7b0NBQUM7aUNBQWM7Z0NBQzFCMkIsT0FBTyxXQUFZcEMsQ0FBQUEsU0FBU3FDLFVBQVUsSUFBSSxTQUFRO2dDQUNsREMsT0FBT0MsT0FBT2Q7NEJBQ2hCOzRCQUNBZSxVQUFVO2dDQUFDO29DQUFDckIsTUFBTTtvQ0FBUUM7Z0NBQUs7NkJBQUU7d0JBQ25DO3FCQUNEO2dCQUNIO1lBQ0Y7WUFFQSxJQUFJLE9BQU9FLFdBQVcsVUFBVTtnQkFDOUIsTUFBTW1CLE9BQU9sRCxrRkFBa0JBLENBQUMrQixRQUFRO29CQUFDb0IsVUFBVTtnQkFBSTtnQkFDdkQsc0RBQXNEO2dCQUN0RHBCLFNBQVMsa0NBQWtDLEdBQUltQixLQUFLRCxRQUFRO1lBQzlEO1lBRUEsTUFBTUcsUUFBUTVCLE9BQU95QixRQUFRLENBQUNJLE9BQU8sQ0FBQzNCO1lBQ3RDRixPQUFPeUIsUUFBUSxDQUFDSyxNQUFNLENBQUNGLE9BQU8sTUFBTXJCO1lBQ3BDLE9BQU81QiwwREFBSUE7UUFDYjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaGF0Z3B0LWxpdGUvLi9ub2RlX21vZHVsZXMvcmVoeXBlLWthdGV4L2xpYi9pbmRleC5qcz8xYWQ0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLkVsZW1lbnRDb250ZW50fSBFbGVtZW50Q29udGVudFxuICogQHR5cGVkZWYge2ltcG9ydCgnaGFzdCcpLlJvb3R9IFJvb3RcbiAqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdrYXRleCcpLkthdGV4T3B0aW9uc30gS2F0ZXhPcHRpb25zXG4gKlxuICogQHR5cGVkZWYge2ltcG9ydCgndmZpbGUnKS5WRmlsZX0gVkZpbGVcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPbWl0PEthdGV4T3B0aW9ucywgJ2Rpc3BsYXlNb2RlJyB8ICd0aHJvd09uRXJyb3InPn0gT3B0aW9uc1xuICovXG5cbmltcG9ydCB7ZnJvbUh0bWxJc29tb3JwaGljfSBmcm9tICdoYXN0LXV0aWwtZnJvbS1odG1sLWlzb21vcnBoaWMnXG5pbXBvcnQge3RvVGV4dH0gZnJvbSAnaGFzdC11dGlsLXRvLXRleHQnXG5pbXBvcnQga2F0ZXggZnJvbSAna2F0ZXgnXG5pbXBvcnQge1NLSVAsIHZpc2l0UGFyZW50c30gZnJvbSAndW5pc3QtdXRpbC12aXNpdC1wYXJlbnRzJ1xuXG4vKiogQHR5cGUge1JlYWRvbmx5PE9wdGlvbnM+fSAqL1xuY29uc3QgZW1wdHlPcHRpb25zID0ge31cbi8qKiBAdHlwZSB7UmVhZG9ubHlBcnJheTx1bmtub3duPn0gKi9cbmNvbnN0IGVtcHR5Q2xhc3NlcyA9IFtdXG5cbi8qKlxuICogUmVuZGVyIGVsZW1lbnRzIHdpdGggYSBgbGFuZ3VhZ2UtbWF0aGAgKG9yIGBtYXRoLWRpc3BsYXlgLCBgbWF0aC1pbmxpbmVgKVxuICogY2xhc3Mgd2l0aCBLYVRlWC5cbiAqXG4gKiBAcGFyYW0ge1JlYWRvbmx5PE9wdGlvbnM+IHwgbnVsbCB8IHVuZGVmaW5lZH0gW29wdGlvbnNdXG4gKiAgIENvbmZpZ3VyYXRpb24gKG9wdGlvbmFsKS5cbiAqIEByZXR1cm5zXG4gKiAgIFRyYW5zZm9ybS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVoeXBlS2F0ZXgob3B0aW9ucykge1xuICBjb25zdCBzZXR0aW5ncyA9IG9wdGlvbnMgfHwgZW1wdHlPcHRpb25zXG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybS5cbiAgICpcbiAgICogQHBhcmFtIHtSb290fSB0cmVlXG4gICAqICAgVHJlZS5cbiAgICogQHBhcmFtIHtWRmlsZX0gZmlsZVxuICAgKiAgIEZpbGUuXG4gICAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gICAqICAgTm90aGluZy5cbiAgICovXG4gIHJldHVybiBmdW5jdGlvbiAodHJlZSwgZmlsZSkge1xuICAgIHZpc2l0UGFyZW50cyh0cmVlLCAnZWxlbWVudCcsIGZ1bmN0aW9uIChlbGVtZW50LCBwYXJlbnRzKSB7XG4gICAgICBjb25zdCBjbGFzc2VzID0gQXJyYXkuaXNBcnJheShlbGVtZW50LnByb3BlcnRpZXMuY2xhc3NOYW1lKVxuICAgICAgICA/IGVsZW1lbnQucHJvcGVydGllcy5jbGFzc05hbWVcbiAgICAgICAgOiBlbXB0eUNsYXNzZXNcbiAgICAgIC8vIFRoaXMgY2xhc3MgY2FuIGJlIGdlbmVyYXRlZCBmcm9tIG1hcmtkb3duIHdpdGggYCBgYGBtYXRoIGAuXG4gICAgICBjb25zdCBsYW5ndWFnZU1hdGggPSBjbGFzc2VzLmluY2x1ZGVzKCdsYW5ndWFnZS1tYXRoJylcbiAgICAgIC8vIFRoaXMgY2xhc3MgaXMgdXNlZCBieSBgcmVtYXJrLW1hdGhgIGZvciBmbG93IG1hdGggKGJsb2NrLCBgJCRcXG5tYXRoXFxuJCRgKS5cbiAgICAgIGNvbnN0IG1hdGhEaXNwbGF5ID0gY2xhc3Nlcy5pbmNsdWRlcygnbWF0aC1kaXNwbGF5JylcbiAgICAgIC8vIFRoaXMgY2xhc3MgaXMgdXNlZCBieSBgcmVtYXJrLW1hdGhgIGZvciB0ZXh0IG1hdGggKGlubGluZSwgYCRtYXRoJGApLlxuICAgICAgY29uc3QgbWF0aElubGluZSA9IGNsYXNzZXMuaW5jbHVkZXMoJ21hdGgtaW5saW5lJylcbiAgICAgIGxldCBkaXNwbGF5TW9kZSA9IG1hdGhEaXNwbGF5XG5cbiAgICAgIC8vIEFueSBjbGFzcyBpcyBmaW5lLlxuICAgICAgaWYgKCFsYW5ndWFnZU1hdGggJiYgIW1hdGhEaXNwbGF5ICYmICFtYXRoSW5saW5lKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBsZXQgcGFyZW50ID0gcGFyZW50c1twYXJlbnRzLmxlbmd0aCAtIDFdXG4gICAgICBsZXQgc2NvcGUgPSBlbGVtZW50XG5cbiAgICAgIC8vIElmIHRoaXMgd2FzIGdlbmVyYXRlZCB3aXRoIGAgYGBgbWF0aCBgLCByZXBsYWNlIHRoZSBgPHByZT5gIGFuZCB1c2VcbiAgICAgIC8vIGRpc3BsYXkuXG4gICAgICBpZiAoXG4gICAgICAgIGVsZW1lbnQudGFnTmFtZSA9PT0gJ2NvZGUnICYmXG4gICAgICAgIGxhbmd1YWdlTWF0aCAmJlxuICAgICAgICBwYXJlbnQgJiZcbiAgICAgICAgcGFyZW50LnR5cGUgPT09ICdlbGVtZW50JyAmJlxuICAgICAgICBwYXJlbnQudGFnTmFtZSA9PT0gJ3ByZSdcbiAgICAgICkge1xuICAgICAgICBzY29wZSA9IHBhcmVudFxuICAgICAgICBwYXJlbnQgPSBwYXJlbnRzW3BhcmVudHMubGVuZ3RoIC0gMl1cbiAgICAgICAgZGlzcGxheU1vZGUgPSB0cnVlXG4gICAgICB9XG5cbiAgICAgIC8qIGM4IGlnbm9yZSBuZXh0IC0tIHZlcmJvc2UgdG8gdGVzdC4gKi9cbiAgICAgIGlmICghcGFyZW50KSByZXR1cm5cblxuICAgICAgY29uc3QgdmFsdWUgPSB0b1RleHQoc2NvcGUsIHt3aGl0ZXNwYWNlOiAncHJlJ30pXG5cbiAgICAgIC8qKiBAdHlwZSB7QXJyYXk8RWxlbWVudENvbnRlbnQ+IHwgc3RyaW5nIHwgdW5kZWZpbmVkfSAqL1xuICAgICAgbGV0IHJlc3VsdFxuXG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBrYXRleC5yZW5kZXJUb1N0cmluZyh2YWx1ZSwge1xuICAgICAgICAgIC4uLnNldHRpbmdzLFxuICAgICAgICAgIGRpc3BsYXlNb2RlLFxuICAgICAgICAgIHRocm93T25FcnJvcjogdHJ1ZVxuICAgICAgICB9KVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgY2F1c2UgPSAvKiogQHR5cGUge0Vycm9yfSAqLyAoZXJyb3IpXG4gICAgICAgIGNvbnN0IHJ1bGVJZCA9IGNhdXNlLm5hbWUudG9Mb3dlckNhc2UoKVxuXG4gICAgICAgIGZpbGUubWVzc2FnZSgnQ291bGQgbm90IHJlbmRlciBtYXRoIHdpdGggS2FUZVgnLCB7XG4gICAgICAgICAgYW5jZXN0b3JzOiBbLi4ucGFyZW50cywgZWxlbWVudF0sXG4gICAgICAgICAgY2F1c2UsXG4gICAgICAgICAgcGxhY2U6IGVsZW1lbnQucG9zaXRpb24sXG4gICAgICAgICAgcnVsZUlkLFxuICAgICAgICAgIHNvdXJjZTogJ3JlaHlwZS1rYXRleCdcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBLYVRlWCBjYW4gaGFuZGxlIGBQYXJzZUVycm9yYCBpdHNlbGYsIGJ1dCBub3Qgb3RoZXJzLlxuICAgICAgICBpZiAocnVsZUlkID09PSAncGFyc2VlcnJvcicpIHtcbiAgICAgICAgICByZXN1bHQgPSBrYXRleC5yZW5kZXJUb1N0cmluZyh2YWx1ZSwge1xuICAgICAgICAgICAgLi4uc2V0dGluZ3MsXG4gICAgICAgICAgICBkaXNwbGF5TW9kZSxcbiAgICAgICAgICAgIHN0cmljdDogJ2lnbm9yZScsXG4gICAgICAgICAgICB0aHJvd09uRXJyb3I6IGZhbHNlXG4gICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICAvLyBHZW5lcmF0ZSBzaW1pbGFyIG1hcmt1cCBpZiB0aGlzIGlzIGFuIG90aGVyIGVycm9yLlxuICAgICAgICAvLyBTZWU6IDxodHRwczovL2dpdGh1Yi5jb20vS2FUZVgvS2FUZVgvYmxvYi81ZGM3YWYwL2RvY3MvZXJyb3IubWQ+LlxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIHR5cGU6ICdlbGVtZW50JyxcbiAgICAgICAgICAgICAgdGFnTmFtZTogJ3NwYW4nLFxuICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBbJ2thdGV4LWVycm9yJ10sXG4gICAgICAgICAgICAgICAgc3R5bGU6ICdjb2xvcjonICsgKHNldHRpbmdzLmVycm9yQ29sb3IgfHwgJyNjYzAwMDAnKSxcbiAgICAgICAgICAgICAgICB0aXRsZTogU3RyaW5nKGVycm9yKVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0eXBlOiAndGV4dCcsIHZhbHVlfV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHJvb3QgPSBmcm9tSHRtbElzb21vcnBoaWMocmVzdWx0LCB7ZnJhZ21lbnQ6IHRydWV9KVxuICAgICAgICAvLyBDYXN0IGFzIHdlIGRvbuKAmXQgZXhwZWN0IGBkb2N0eXBlc2AgaW4gS2FUZVggcmVzdWx0LlxuICAgICAgICByZXN1bHQgPSAvKiogQHR5cGUge0FycmF5PEVsZW1lbnRDb250ZW50Pn0gKi8gKHJvb3QuY2hpbGRyZW4pXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGluZGV4ID0gcGFyZW50LmNoaWxkcmVuLmluZGV4T2Yoc2NvcGUpXG4gICAgICBwYXJlbnQuY2hpbGRyZW4uc3BsaWNlKGluZGV4LCAxLCAuLi5yZXN1bHQpXG4gICAgICByZXR1cm4gU0tJUFxuICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJmcm9tSHRtbElzb21vcnBoaWMiLCJ0b1RleHQiLCJrYXRleCIsIlNLSVAiLCJ2aXNpdFBhcmVudHMiLCJlbXB0eU9wdGlvbnMiLCJlbXB0eUNsYXNzZXMiLCJyZWh5cGVLYXRleCIsIm9wdGlvbnMiLCJzZXR0aW5ncyIsInRyZWUiLCJmaWxlIiwiZWxlbWVudCIsInBhcmVudHMiLCJjbGFzc2VzIiwiQXJyYXkiLCJpc0FycmF5IiwicHJvcGVydGllcyIsImNsYXNzTmFtZSIsImxhbmd1YWdlTWF0aCIsImluY2x1ZGVzIiwibWF0aERpc3BsYXkiLCJtYXRoSW5saW5lIiwiZGlzcGxheU1vZGUiLCJwYXJlbnQiLCJsZW5ndGgiLCJzY29wZSIsInRhZ05hbWUiLCJ0eXBlIiwidmFsdWUiLCJ3aGl0ZXNwYWNlIiwicmVzdWx0IiwicmVuZGVyVG9TdHJpbmciLCJ0aHJvd09uRXJyb3IiLCJlcnJvciIsImNhdXNlIiwicnVsZUlkIiwibmFtZSIsInRvTG93ZXJDYXNlIiwibWVzc2FnZSIsImFuY2VzdG9ycyIsInBsYWNlIiwicG9zaXRpb24iLCJzb3VyY2UiLCJzdHJpY3QiLCJzdHlsZSIsImVycm9yQ29sb3IiLCJ0aXRsZSIsIlN0cmluZyIsImNoaWxkcmVuIiwicm9vdCIsImZyYWdtZW50IiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/rehype-katex/lib/index.js\n");

/***/ })

};
;